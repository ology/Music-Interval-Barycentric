#!/usr/bin/env perl

use AI::Genetic::Pro;
use List::MoreUtils qw(uniq);
use MIDI::Simple;
use Music::Interval::Barycentric;

my $max = shift || 16;

my $notes = [
    [ 0 .. 11 ], # chromatic
    [ 0 .. 11 ], # chromatic
    [ 0 .. 11 ], # chromatic
];

my $top = 8; # Number above the highest evenness_index
my $threshold = 5; # Allowed top - evenness_index

for my $i (1 .. $max) {
    my $ga = AI::Genetic::Pro->new(        
        -fitness         => \&fitness,     # fitness function
        -terminate       => \&terminate,   # terminate function
        -type            => 'listvector',  # type of chromosome
        -population      => 100,           # population
        -crossover       => 0.9,           # probab. of crossover
        -mutation        => 0.05,          # probab. of mutation
        -parents         => 2,             # number  of parents
        -selection       => ['Roulette'],  # selection strategy
        -strategy        => ['PMX'],       # crossover strategy
        -cache           => 1,             # cache results
        -history         => 1,             # remember best results
        -preserve        => 1,             # remember the bests
        -variable_length => 0,             # turn variable length OFF
    );

    $ga->init($notes);

    $ga->evolve(100);
    use Data::Dumper;warn(__PACKAGE__,' ',__LINE__," MARK: ",Dumper$ga->getFittest);
    warn(__PACKAGE__,' ',__LINE__," Value: ",$top - $ga->as_value($ga->getFittest),"\n");
}

sub fitness {
    my ($ga, $chromosome) = @_;
    return 0 if @$chromosome != scalar uniq(@$chromosome); # Duplicates not allowed
    return $top - evenness_index($chromosome);
}

sub terminate {
    my ($ga) = @_;
    return 1 if $ga->as_value($ga->getFittest) > $threshold;
    return;
}
